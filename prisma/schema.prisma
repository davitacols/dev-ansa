// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FeatureSuggestion {
  id         String             @id @default(cuid())
  name       String
  email      String
  category   String?
  suggestion String             @db.Text
  status     SuggestionStatus   @default(NEW)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  comments   SuggestionComment[]
}

model SuggestionComment {
  id          String           @id @default(cuid())
  content     String           @db.Text
  authorId    String
  suggestionId String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  suggestion  FeatureSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum SuggestionStatus {
  NEW
  REVIEWING
  PLANNED
  IMPLEMENTED
  DECLINED
}
